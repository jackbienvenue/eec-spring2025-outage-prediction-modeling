---
author: Jack Bienvenue
title: Building Grid Cells - Andreas's Code
format: html
---

Here, I take Andreas's code and extend it slightly for the purposes of this analysis. 

```{python}
import xarray as xr
import numpy as np
import geopandas as gpd
import shapely
from shapely.geometry import Polygon
import folium

# Get the coordinates from the dataset, explicitly using cfgrib engine
era5_dataset = xr.open_dataset('../data/data_CT/download_ERA5_LAND_package_2023_01.grib', engine='cfgrib', backend_kwargs={
                            'filter_by_keys': {
                                'typeOfLevel': 'surface',
                                'step': 1  # 1 hour step size
                            }
                        })

longitudes = era5_dataset['longitude'].values
latitudes = era5_dataset['latitude'].values

# Create a mesh
longitudes, latitudes = np.meshgrid(longitudes, latitudes)

# Create list to hold grid cell polygons
grid_cells = []

# Iterate over grid cells and create polygons
for i in range(longitudes.shape[0] - 1):  # Iterate over rows (latitudes)
    for j in range(longitudes.shape[1] - 1):  # Iterate over columns (longitudes)
        # Latitude and longitude of the center (point)
        center_lat = latitudes[i, j]
        center_lon = longitudes[i, j]

        # Calculate the distance (half-step) to the neighbors
        half_step_lat = (latitudes[i + 1, j] - latitudes[i, j]) / 2
        half_step_lon = (longitudes[i, j + 1] - longitudes[i, j]) / 2

        # Calculate the coordinates of the corners using the half-step distance
        latitudes_corners = [center_lat - half_step_lat, center_lat - half_step_lat, center_lat + half_step_lat, center_lat + half_step_lat]
        longitudes_corners = [center_lon - half_step_lon, center_lon + half_step_lon, center_lon + half_step_lon, center_lon - half_step_lon]
        
        # Create the polygon using these corner coordinates
        polygon = Polygon(zip(longitudes_corners, latitudes_corners))
        
        # Append the polygon to the list of grid cells
        grid_cells.append(polygon)

# Create GeoDataFrame with grid cell polygons
era5_grid_registry = gpd.GeoDataFrame(geometry=grid_cells, crs='epsg:4326')

# Add row and column identifiers to the dataframe
era5_grid_registry['row'] = np.repeat(np.arange(longitudes.shape[0] - 1), longitudes.shape[1] - 1)
era5_grid_registry['col'] = np.tile(np.arange(longitudes.shape[1] - 1), longitudes.shape[0] - 1)

# Export as a shapefile
era5_grid_registry.to_file("../data/grid_cell_shapefile/andreas_jack_code_shapefile/era5_grid_registry.shp")

# Create a folium map centered on the average latitude and longitude
map_center = [latitudes.mean(), longitudes.mean()]
m = folium.Map(location=map_center, zoom_start=4)

# Add grid cells as polygons to the map
for polygon in grid_cells:
    folium.Polygon(
        locations=[(lat, lon) for lon, lat in polygon.exterior.coords],
        color='blue',
        fill=True,
        fill_color='blue',
        fill_opacity=0.3
    ).add_to(m)

# Save the map as an HTML file
m.save("../data/grid_cell_shapefile/andreas_jack_code_shapefile/era5_grid_registry_map.html")

m

```

