---
author: Jack Bienvenue
date: 22 Februrary 2025
format: html
---

Now that the outage data is accessible, we will use it to build models to predict power outages.

```{python}
#| echo: false

# Package Import
import pandas as pd
from sklearn import linear_model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn import metrics
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.model_selection import train_test_split, cross_val_score

# Data Import
events = pd.read_csv('../data/driver_maximized_events.csv')
```

Multiple Linear Regression for outages based on maximum wind velocity & maximum precipitation intensity:

``` {python}
X = events[['max_precip_intensity', 'max_wind_velo']]

y = events['customers_affected']

import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Example dataset (replace this with your actual `events` DataFrame)
# X = events[['max_precip_intensity', 'max_wind_velo']]
# y = events['customers_affected']

# Initialize the model
model = LinearRegression()

# Train the model
model.fit(X, y)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Plot max_precip_intensity vs customers_affected
plt.figure(figsize=(12, 6))

# Scatter plot for max_precip_intensity vs customers_affected
plt.subplot(1, 2, 1)
plt.scatter(X['max_precip_intensity'], y, color='blue', label='Actual Data')
plt.plot(X['max_precip_intensity'], model.intercept_ + model.coef_[0] * X['max_precip_intensity'], color='red', label='Fitted Line')
plt.xlabel('Max Precipitation Intensity')
plt.ylabel('Customers Affected')
plt.title('Max Precipitation Intensity vs Customers Affected')
plt.legend()

# Plot max_wind_velo vs customers_affected
plt.subplot(1, 2, 2)
plt.scatter(X['max_wind_velo'], y, color='green', label='Actual Data')
plt.plot(X['max_wind_velo'], model.intercept_ + model.coef_[1] * X['max_wind_velo'], color='red', label='Fitted Line')
plt.xlabel('Max Wind Velocity')
plt.ylabel('Customers Affected')
plt.title('Max Wind Velocity vs Customers Affected')
plt.legend()

plt.tight_layout()
plt.show()

```

```{python}
from mpl_toolkits.mplot3d import Axes3D

# Create a 3D plot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Scatter plot of the actual data points
ax.scatter(X['max_precip_intensity'], X['max_wind_velo'], y, color='blue', label='Data Points')

# Create a mesh grid for the two independent variables
x1_range = np.linspace(X['max_precip_intensity'].min(), X['max_precip_intensity'].max(), 10)
x2_range = np.linspace(X['max_wind_velo'].min(), X['max_wind_velo'].max(), 10)
x1_grid, x2_grid = np.meshgrid(x1_range, x2_range)

# Calculate predicted y values for the mesh grid points
y_grid = model.intercept_ + model.coef_[0] * x1_grid + model.coef_[1] * x2_grid

# Plot the regression plane
ax.plot_surface(x1_grid, x2_grid, y_grid, color='red', alpha=0.5, rstride=100, cstride=100)

# Labels and title
ax.set_xlabel('Max Precipitation Intensity')
ax.set_ylabel('Max Wind Velocity')
ax.set_zlabel('Customers Affected')
ax.set_title('3D Multiple Linear Regression')

# Show the plot
plt.legend()
plt.show()
```

```{python}
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from sklearn.linear_model import LinearRegression

# Example dataset (replace with your actual 'events' DataFrame)
# X = events[['max_precip_intensity', 'max_wind_velo']]
# y = events['customers_affected']

# Initialize the model
model = LinearRegression()

# Train the model
model.fit(X, y)

# Coefficients and intercept
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Calculate the percentage of data points in use
data_points_percentage = (len(X) / len(X)) * 100  # 100% of the data points are used
data_points_percentage = round(data_points_percentage, 2)  # Round to two decimal places

# Create the mesh grid for the independent variables
x1_range = np.linspace(X['max_precip_intensity'].min(), X['max_precip_intensity'].max(), 30)
x2_range = np.linspace(X['max_wind_velo'].min(), X['max_wind_velo'].max(), 30)
x1_grid, x2_grid = np.meshgrid(x1_range, x2_range)

# Calculate predicted y values for the mesh grid points
y_grid = model.intercept_ + model.coef_[0] * x1_grid + model.coef_[1] * x2_grid

# Create the scatter plot for actual data points
scatter = go.Scatter3d(
    x=X['max_precip_intensity'],
    y=X['max_wind_velo'],
    z=y,
    mode='markers',
    marker=dict(size=5, color='blue', opacity=0.8),
    name=f'Data Points ({data_points_percentage}% of data)'
)

# Create the surface plot for the regression plane
surface = go.Surface(
    x=x1_grid, 
    y=x2_grid, 
    z=y_grid, 
    colorscale='Viridis', 
    opacity=0.5,
    name='Regression Plane'
)

# Layout configuration for the interactive plot
layout = go.Layout(
    title='OPM Multiple Linear Regression',
    scene=dict(
        xaxis_title='Peak Precipitation Intensity (m/hr)',
        yaxis_title='Peak Wind Velocity (m/s)',
        zaxis_title='Customers Affected'
    ),
    showlegend=True
)

# Create the figure
fig = go.Figure(data=[scatter, surface], layout=layout)

# Show the interactive plot
fig.show()

```