---
author: Jack Bienvenue
date: 23 February 2025
format: html
---

In this file, we'll explore the dataset being used for our outcome variable, outages.

``` {python}
#| echo: false

# Package import
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import folium

# Data import
df = pd.read_csv("../data/outage_data.csv")
```

Let's start with a timeseries visualization of outage events:

``` {python}
# Step 1: Convert 'datetime' to pandas datetime format (if not already)
df['datetime'] = pd.to_datetime(df['datetime'])

# Step 2: Plotting the time series
plt.figure(figsize=(10, 6))
plt.plot(df['datetime'], df['customers_affected'], marker='o', linestyle='-', color='b')

# Step 3: Formatting the plot
plt.title('Time Series of Outages (Customers Affected)', fontsize=14)
plt.xlabel('Date and Time', fontsize=12)
plt.ylabel('Customers Affected', fontsize=12)
plt.xticks(rotation=45)  # Rotate datetime labels for readability

# Optional: To make the plot more readable, you can format the x-axis to show only the date
plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d %H:%M'))

# Step 4: Show the plot
plt.tight_layout()
plt.show()

```

Let's now build a frequency plot of different numbers of customers affected:

```{python}
#| echo: false

# Step 1: Plotting the frequency of customers affected
plt.figure(figsize=(10, 6))

# Step 2: Create a histogram of 'customers_affected'
plt.hist(df['customers_affected'], bins=50, color='skyblue', edgecolor='black', range=(0, 50))

# Step 3: Formatting the plot
plt.title('Frequency Plot of Number of Customers Affected (artificially small range)', fontsize=14)
plt.xlabel('Customers Affected', fontsize=12)
plt.ylabel('Frequency', fontsize=12)

# Step 4: Show the plot
plt.tight_layout()
plt.show()
```

Let's try the histogram again, this time with a log transformation:

```{python}
#| echo: false
plt.hist(np.log(df['customers_affected']), bins=20, color='skyblue', edgecolor='black')
plt.title('Log-Transformed Frequency Plot of Customers Affected')
plt.xlabel('Log(Customers Affected)')
plt.ylabel('Frequency')
plt.show()
```

Let's create a scatterplot of the size and duration of the outages:

``` {python}
# Bring data within reasonable range (note, we are omitting data in the output which we have not shown to be outliers, this is simply for scaling for a better sense of the data distribution)

new_df = df[(df['customers_affected'] < 5000) & (df['duration_minutes'] < 1440)] 

plt.scatter(new_df['customers_affected'], new_df['duration_minutes'], color='blue', s=5, alpha=0.1)

plt.title('Count of Customers Affected vs. Outage Duration')
plt.xlabel('Count of Customers Affected')
plt.ylabel('Outage Duration (minutes)')
plt.show()

```

It looks as though it will be very challenging to establish a meaningful relationship between outage duration and the count of customers affected directly.