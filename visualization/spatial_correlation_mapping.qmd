---
title: Mapping Covariance of Drivers of Grid Cells
author: Jack Bienvenue
date: 19 February 2025
format: html
---

In this file, we will visualize relationships between driver variables on a spatial level. We suspect that the extent of correlation of drivers is not spatially stationary, as different topographical, metereological, and altitude factors could influence the drivers and their relationships throughout the region of interest. 

We will visualize the correlations (not covariance here for standardization of the graphics) to examine the range of correlations and whether there appear to be any gradients in the map.

```{python}
# Package Import
import pandas as pd
import geopandas as gpd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import re
import folium
```

Let's move onto building a function to get the correlation map for two drivers:

``` {python}
#| eval: true

def build_driver_correlation_map(driver1, driver2, shapefile_directory, input_directory, save_to_file = False, output_directory = None):

    '''
    Takes input target drivers, relates their correlation within individual grid cells, and outputs a map of the grid cells with their correlations.

    ARGUMENTS:
    1. driver1 - title of the column for the first driver of interest in the CSV (df) that is brought in for the analysis
    2. driver2 - title of the column for the second driver of interest in the CSV (df) that is brought in for the analysis
    3. shapefile_directory - path for the directory housing the files making up the grid cell shapefiles
    4. input_directory - path for the directory housing the CSVs for data for the grid cells
    5. save_to_file (DEFAULTS TO False for no file output)
    6. output_directory (DEFAULTS TO None for no file output)

    '''
    # Prelimaries - Build helper functions:
    def extract_lat_lon_from_filename(filename):
        """
        Extract latitude and longitude from the CSV filename.
        Example: "lat_40_98_lon_-73_12768_time_series_weather.csv"
        """

        # Use regex to extract latitude and longitude from filename
        lat_match = re.search(r"lat_([-]?\d+_\d+)_", filename)
        lon_match = re.search(r"lon_([-]?\d+_\d+)_", filename)

        if lat_match and lon_match:
            # Split the latitude and longitude at the underscore
            lat_parts = lat_match.group(1).split('_')
            lon_parts = lon_match.group(1).split('_')

            # Combine the degree and minute part as a decimal
            lat = float(lat_parts[0] + '.' + lat_parts[1])  # Degrees.Minutes format
            lon = float(lon_parts[0] + '.' + lon_parts[1])  # Degrees.Minutes format

            # Round the latitude and longitude to 5 decimal places
            lat = round(lat, 5)
            lon = round(lon, 5)

            ####print('lat:', lat, 'lon:', lon) Debugging
            return lat, lon
        else:
            raise ValueError(f"Filename format is incorrect. Could not extract latitude/longitude from {filename}")

    def create_directory(output_directory_path):
        if not os.path.exists(output_directory_path):
            os.makedirs(output_directory_path)

    # FUNCTION PHASE 1: Calculating correlations for individual grid cells

    ## Step 1: Load in shapefile
    shapefile = gpd.read_file(shapefile_directory)
    shapefile = shapefile.to_crs(epsg=4326) # Confirm the correct coordinate projection

    ## Step 2: Initialization of empty list for storage
    correlations = []
    
    ## Step 3: Load CSVs for individual grid cells and iteratively calculate correlation

    for filename in os.listdir(input_directory):
        if filename.endswith(".csv"):
            # Extract lat/long
            lat, lon = extract_lat_lon_from_filename(filename)

            # Load CSV data for given grid cell
            csv_file = os.path.join(input_directory, filename)
            df = pd.read_csv(csv_file)

            # Confirm presence of drivers
            if driver1 not in df.columns or driver2 not in df.columns:
                raise ValueError(f"Columns {driver1} or {driver2} not found in CSV {filename}")

            # Calculate correlation of drivers:
            correlation = np.corrcoef(df[driver1], df[driver2])[0, 1]

            # Store result w/ its lat and long:
            correlations.append((lat, lon, correlation))

        # Turn list of results into df 
    correlation_df = pd.DataFrame(correlations, columns = ["latitude", "longitude", "correlation"])

    print(correlation_df)

#------------------------------------------ DEBUGGING MAP
    m = folium.Map(location=[correlation_df["latitude"].mean(), correlation_df["longitude"].mean()], zoom_start=10)

    # Plot each point on the map with a color based on the correlation value
    for _, row in correlation_df.iterrows():
        folium.CircleMarker(
            location=[row["latitude"], row["longitude"]],
            radius=8,
            color='blue' if row["correlation"] > 0 else 'red',  # Color based on correlation value
            fill=True,
            fill_color='blue' if row["correlation"] > 0 else 'red',  # Same color for the fill
            fill_opacity=0.6,
            popup=f'Lat: {row["latitude"]}, Lon: {row["longitude"]}, Correlation: {row["correlation"]:.2f}'
        ).add_to(m)

    # Display the map
    m.save("trial_point_map.html")

#------------------------------------------

    # FUNCTION PHASE 2: Mapping


    # Step 4: Merge the correlation data with the shapefile based on latitude/longitude
    # We will use a spatial join between the shapefile and the correlation data
    correlation_gdf = gpd.GeoDataFrame(correlation_df, 
                                       geometry=gpd.points_from_xy(correlation_df.longitude, correlation_df.latitude),
                                       crs=shapefile.crs)

    # Spatial join based on proximity (you can adjust the max_distance tolerance)
    merged = gpd.sjoin(shapefile, correlation_gdf, how="left", predicate="intersects")

    # Step 5: Generate map title from driver names
    map_title = f"Correlation between {driver1} and {driver2}"

    # Step 6: Generate axis labels from driver names
    xlabel = driver1
    ylabel = driver2

    # Step 7: Create a color map for the correlation values
    cmap = plt.cm.get_cmap('coolwarm')  # Use a diverging color map for correlations (-1 to 1)

    # Step 8: Construct map with geopandas
    fig, ax = plt.subplots(figsize=(10, 10))
    merged.plot(column='correlation', cmap=cmap, linewidth=0.8, ax=ax, edgecolor='0.8', legend = True)

    ax.set_title(map_title, fontdict={'fontsize': 16})
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)

    # FUNCTION PHASE 3: Saving map to file (if desired)

    if save_to_file and output_directory is not None:
        # Make sure the output directory exists
        os.makedirs(output_directory, exist_ok=True)

        # Save the figure to the output directory
        output_file = os.path.join(output_directory, f'correlation_map_{driver1}_{driver2}.png')
        fig.savefig(output_file, dpi=300)
        plt.close(fig)  # Close the figure to free memory

    else:
        # If not saving, just show the map
        plt.show()
```

We will start by observing the relationship between the following drivers:

1. Average Daily Wind Speed & Total Daily Precipitation
2. 
3.
4.


Now, let's put our function to work and observe some of these maps:

``` {python}
#| eval: true
#| echo: false

    '''
    Takes input target drivers, relates their correlation within individual grid cells, and outputs a map of the grid cells with their correlations.

    ARGUMENTS:
    1. driver1 - title of the column for the first driver of interest in the CSV (df) that is brought in for the analysis
    2. driver2 - title of the column for the second driver of interest in the CSV (df) that is brought in for the analysis
    3. shapefile_directory - path for the directory housing the files making up the grid cell shapefiles
    4. input_directory - path for the directory housing the CSVs for data for the grid cells
    5. save_to_file (DEFAULTS TO False for no file output)
    6. output_directory (DEFAULTS TO None for no file output)

    '''

build_driver_correlation_map("avg_wind_speed", "avg_temp", "/Users/jackbienvenuejr/Desktop/EEC_Work/weather-driver-independence-evaluation/data/grid_cell_shapefile", "/Volumes/JB_Fortress_L3/EEC/aggregated_csvs")
```
